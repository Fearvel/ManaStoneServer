{"version":3,"file":"ManaStone-Server.js","sourceRoot":"","sources":["ManaStone-Server.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\n// @ts-ignore\r\nimport * as config from './config.json';\r\nimport * as https from 'https';\r\nimport * as express from 'express';\r\nimport * as MysqlConnector from './MySQLConnector';\r\n\r\nlet mysqlConnectionManager = new MysqlConnector.sql.MySQLConnector;\r\nlet app = express();\r\nlet options = {\r\n    key: fs.readFileSync(config.CertPath.key),\r\n    cert: fs.readFileSync(config.CertPath.cert)\r\n};\r\nlet server = https.createServer(options, app);\r\nlet io = require('socket.io')(server);\r\n\r\nconst Version = \"1.0.0.0\";\r\n\r\n\r\n/**\r\n * Socket.io Server Handler\r\n * Reacts on incoming Connections\r\n */\r\nio.on('connection', (socket) => {\r\n    //   socket.emit('info', Version);\r\n    mysqlConnectionManager.insertServerLog(socket.id.toString(), \" Connection Opened\");\r\n\r\n    /**\r\n     * Reacts on incoming connections on ServerTimeRequest\r\n     * emits ServerTime on ServerTime\r\n     */\r\n    socket.on('ServerTimeRequest', () => {\r\n        try {\r\n            mysqlConnectionManager.retrieveServerTime().then(row => {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ServerTimeRequest\");\r\n                    socket.emit(\"ServerTime\", JSON.stringify((row[0])[0]));\r\n                }\r\n            );\r\n        } catch (e) {\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on ManastoneVersionRequest\r\n     * emits ManastoneServerVersion on ManastoneVersion\r\n     */\r\n    socket.on('ManastoneVersionRequest', () => {\r\n        try {\r\n            mysqlConnectionManager.retrieveManastoneVersion().then(row => {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ManastoneVersionRequest\");\r\n                    socket.emit(\"ManastoneVersion\", JSON.stringify((row[0])[0]));\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: ManastoneVersionRequest\");\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on ActivationRequest\r\n     * Activates a SerialNumber if activatable and matching the productId\r\n     * emits the ActivationKey on ActivationOffer\r\n     */\r\n    socket.on('ActivationRequest', (data) => {\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.checkSerialNumberActivatable(dataObj.SerialNumber).then(row => {\r\n                    if ((row[0])[0].Activatable == 1) {\r\n                        mysqlConnectionManager.checkProductMatchingSerialNumber(dataObj.ProductUUID,\r\n                            dataObj.SerialNumber).then(rowI => {\r\n                            if ((rowI[0])[0].ProductMatch == 1) {\r\n                                mysqlConnectionManager.activateSerialNumber(dataObj.SerialNumber,\r\n                                    dataObj.HardwareId).then(rowJ => {\r\n                                    mysqlConnectionManager.insertServerLog(socket.id.toString(),\r\n                                        \"New ActivationRequest\");\r\n                                    socket.emit('ActivationOffer', JSON.stringify(((rowJ[0])[0])));\r\n                                });\r\n                            } else {\r\n                                socket.emit('ActivationOffer', JSON.stringify({ActivationKey: \"\"}));\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: ActivationRequest\" + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on ActivationOnlineCheckRequest\r\n     * emits a variable which determines if the ActivationKey is valid on ActivationOnlineCheckOffer\r\n     */\r\n    socket.on('ActivationOnlineCheckRequest', (data) => {\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.checkActivation(dataObj.ActivationKey, dataObj.HardwareId).then(row => {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(),\r\n                        \"New ActivationOnlineCheckRequest\");\r\n                    socket.emit(\"ActivationOnlineCheckOffer\", JSON.stringify((row[0])[0]));\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: ActivationOnlineCheckRequest\"\r\n                + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on CustomerReferenceRequest\r\n     * emits CustomerReference on CustomerReferenceOffer\r\n     */\r\n    socket.on('CustomerReferenceRequest', (data) => {\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.retrieveCustomerReference(dataObj.ActivationKey).then(row => {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New CustomerReferenceRequest\");\r\n                    socket.emit(\"CustomerReferenceOffer\", JSON.stringify((row[0])[0]));\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: CustomerReferenceRequest\"\r\n                + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on CheckTokenRequest\r\n     * Uses DateOfExpiry -1H do make sure the Token wont run out in the expected time\r\n     * emits a variable which determines if the Token is valid on CheckTokenOffer\r\n     */\r\n    socket.on('CheckTokenRequest', (data) => {\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.checkToken(dataObj.Token).then(row => {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New CheckTokenRequest\");\r\n                    socket.emit(\"CheckTokenOffer\", JSON.stringify((row[0])[0]));\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: CheckTokenRequest\"\r\n                + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on CheckTokenServerSideRequest\r\n     * emits a variable which determines if the Token is valid on CheckTokenOffer\r\n     */\r\n    socket.on('CheckTokenServerSideRequest', (data) => {\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.checkTokenServerSide(dataObj.Token).then(row => {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New CheckTokenServerSideRequest\");\r\n                    socket.emit(\"CheckTokenOffer\", JSON.stringify((row[0])[0]));\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: CheckTokenServerSideRequest\"\r\n                + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on TokenRequest\r\n     * Generates a token if the ActivationKey is valid\r\n     * emits a Generated Token on TokenOffer\r\n     */\r\n    socket.on('TokenRequest', (data) => {\r\n\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.retrieveToken(dataObj.ActivationKey).then(row => {\r\n                    if ((row[0])[0].Token.length > 0) {\r\n                        mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New TokenRequest\");\r\n                        socket.emit(\"TokenOffer\", JSON.stringify((row[0])[0]));\r\n                    } else {\r\n                        socket.emit('TokenOffer', JSON.stringify({Token: \"\"}));\r\n                    }\r\n                }\r\n            );\r\n        } catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: TokenRequest\"\r\n                + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Reacts on incoming connections on DeactivationRequest\r\n     * Planed for later versions\r\n     * emits on DeactivationOffer\r\n     */\r\n    socket.on('DeactivationRequest', (data) => {\r\n        try {\r\n            let dataObj = JSON.parse(data);\r\n            mysqlConnectionManager.deactivateSerialNumber(dataObj.SerialNumber).then(row => {\r\n                socket.emit('DeactivationOffer', JSON.stringify(((row[0])[0])));\r\n            });\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New DeactivationRequest\");\r\n            sendSimpleResult(true);\r\n        }catch (e) {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"ERROR: DeactivationRequest\"\r\n                + data);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Disconnect event\r\n     * Inserts Connection closed message into the Serverlog Table\r\n     */\r\n    socket.on('disconnect', () => {\r\n        mysqlConnectionManager.insertServerLog(socket.id.toString(), \"Connection Closed\");\r\n    });\r\n});\r\n\r\n/**\r\n * Entry Point of the Socket.io server\r\n * Starts the server and outputs Version and Port\r\n */\r\nserver.listen(config.ServerPort, () => {\r\n    mysqlConnectionManager.insertServerLog(\"\", \"openMPS Server: \"\r\n        + Version + \" Listening on: \" + config.ServerPort);\r\n    console.log('ManaStone Server V %s, Listening on %s', Version, config.ServerPort);\r\n});\r\n\r\n/**\r\n * Sends a SimpleResult\r\n * @param socket\r\n * @param res\r\n * @constructor\r\n */\r\nfunction sendSimpleResult(socket, res: boolean = false): void {\r\n    socket.emit('closer', JSON.stringify({Result: res}));\r\n    socket.disconnect();\r\n}"]}