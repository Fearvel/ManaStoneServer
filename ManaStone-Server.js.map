{"version":3,"file":"ManaStone-Server.js","sourceRoot":"","sources":["ManaStone-Server.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\n// @ts-ignore\r\nimport * as config from './config.json';\r\nimport * as https from 'https';\r\nimport * as express from 'express';\r\nimport * as MysqlConnector from './MySQLConnector';\r\n\r\nlet mysqlConnectionManager = new MysqlConnector.sql.MySQLConnector;\r\nlet app = express();\r\nlet options = {\r\n    key: fs.readFileSync(config.CertPath.key),\r\n    cert: fs.readFileSync(config.CertPath.cert)\r\n};\r\nlet server = https.createServer(options, app);\r\nlet io = require('socket.io')(server);\r\n\r\nconst Version = \"0.0.0.1\";\r\n\r\n\r\n/**\r\n * Socket.io Server Handler\r\n * Reacts on incoming Connections\r\n */\r\nio.on('connection', (socket) => {\r\n    //   socket.emit('info', Version);\r\n    mysqlConnectionManager.insertServerLog(socket.id.toString(), \" Connection Opened\");\r\n\r\n\r\n    socket.on('ServerTimeRequest', () => {\r\n        mysqlConnectionManager.retrieveServerTime().then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ServerTimeRequest\");\r\n                var a = JSON.stringify((row[0])[0]);\r\n                socket.emit(\"ServerTime\", JSON.stringify((row[0])[0]));\r\n            }\r\n        );\r\n    });\r\n\r\n    socket.on('ManastoneVersionRequest', () => {\r\n        mysqlConnectionManager.retrieveManastoneVersion().then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ManastoneVersionRequest\");\r\n                socket.emit(\"ManastoneVersion\", JSON.stringify((row[0])[0]));\r\n            }\r\n        );\r\n    });\r\n\r\n    socket.on('ActivationRequest', (data) => {//TESTME\r\n        let dataObj = JSON.parse(data);\r\n\r\n        mysqlConnectionManager.checkSerialNumberActivatable(dataObj.SerialNumber).then(row => {\r\n                if ((row[0])[0].Activatable == 1) {\r\n                    mysqlConnectionManager.checkProductMatchingSerialNumber(dataObj.ProductUUID,\r\n                        dataObj.SerialNumber).then(rowI => {\r\n                        if ((rowI[0])[0].ProductMatch == 1) {\r\n                            mysqlConnectionManager.activateSerialNumber(dataObj.SerialNumber,\r\n                                dataObj.HardwareId).then(rowJ => {\r\n                                mysqlConnectionManager.insertServerLog(socket.id.toString(),\r\n                                    \"New ActivationRequest\");\r\n                                socket.emit('ActivationOffer', JSON.stringify(((rowJ[0])[0])));\r\n                            });\r\n                        } else {\r\n                            socket.emit('ActivationOffer', JSON.stringify({ActivationKey: \"\"}));\r\n\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    });\r\n\r\n    socket.on('TokenRequest', (data) => {\r\n        let dataObj = JSON.parse(data);\r\n\r\n        mysqlConnectionManager.retrieveToken(dataObj.ActivationKey).then(row => {\r\n                if ((row[0])[0].Token.length > 0) {\r\n                    mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ManastoneVersionRequest\");\r\n                    socket.emit(\"TokenOffer\", JSON.stringify((row[0])[0]));\r\n                } else {\r\n                    socket.emit('TokenOffer', JSON.stringify({Token: \"\"}));\r\n                }\r\n            }\r\n        );\r\n    });\r\n\r\n    socket.on('CheckToken', (data) => {\r\n        let dataObj = JSON.parse(data);\r\n        mysqlConnectionManager.checkToken(dataObj.Token).then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ManastoneVersionRequest\");\r\n                socket.emit(\"ManastoneVersion\", JSON.stringify((row[0])[0]));\r\n            }\r\n        );\r\n    });\r\n    socket.on('ProductUUIDRequest', (data) => {\r\n        let dataObj = JSON.parse(data);\r\n        mysqlConnectionManager.checkToken(dataObj.Token).then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New ManastoneVersionRequest\");\r\n                socket.emit(\"ManastoneVersion\", JSON.stringify((row[0])[0]));\r\n            }\r\n        );\r\n    });\r\n\r\n\r\n    socket.on('DeactivationRequest', (data) => {\r\n        let dataObj = JSON.parse(data);\r\n        mysqlConnectionManager.deactivateSerialNumber(dataObj.SerialNumber).then(row => {\r\n            socket.emit('ActivationOffer', JSON.stringify(((row[0])[0])));\r\n        });\r\n        sendSimpleResult(true);\r\n    });\r\n\r\n\r\n    /**\r\n     * Disconnect event\r\n     * Inserts Connection closed message into the Serverlog Table\r\n     */\r\n    socket.on('disconnect', () => {\r\n        mysqlConnectionManager.insertServerLog(socket.id.toString(), \"Connection Closed\");\r\n    });\r\n})\r\n;\r\n\r\n/**\r\n * Entry Point of the Socket.io server\r\n * Starts the server and outputs Version and Port\r\n */\r\nserver.listen(config.ServerPort, () => {\r\n    mysqlConnectionManager.insertServerLog(\"\", \"openMPS Server: \"\r\n        + Version + \" Listening on: \" + config.ServerPort);\r\n    console.log('ManaStone Server V %s, Listening on %s', Version, config.ServerPort);\r\n});\r\n\r\n/**\r\n * Sends a SimpleResult\r\n * @param socket\r\n * @param res\r\n * @constructor\r\n */\r\nfunction sendSimpleResult(socket, res: boolean = false): void {\r\n    socket.emit('closer', JSON.stringify({Result: res}));\r\n    socket.disconnect();\r\n}"]}