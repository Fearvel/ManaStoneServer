{"version":3,"file":"MySQLConnector.js","sourceRoot":"","sources":["MySQLConnector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mysql from 'mysql';\r\n// @ts-ignore\r\nimport * as config from './config.json';\r\n//\r\nexport namespace sql {\r\n\r\n    /**\r\n     * Class for Managing The SQL Connection\r\n     */\r\n    export class MySQLConnector {\r\n\r\n        /**\r\n         * The DB Connection\r\n         */\r\n        private connection: any;\r\n\r\n        /**\r\n         * Config, read from config.json\r\n         */\r\n        private MySQLConfig = {\r\n            host: config.MySQLConnectionInformation.host,\r\n            user: config.MySQLConnectionInformation.user,\r\n            password: config.MySQLConnectionInformation.password,\r\n            database: config.MySQLConnectionInformation.database\r\n        };\r\n\r\n        /**\r\n         * Constructor\r\n         */\r\n        constructor() {\r\n            this.connection = mysql.createConnection(this.MySQLConfig);\r\n        }\r\n\r\n        /**\r\n         * Unused query function\r\n         * Stays here as an example\r\n         * @param sql\r\n         * @param args\r\n         */\r\n        private query(sql, args) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(sql, args, (err, rows) => {\r\n                    if (err)\r\n                        return reject(err);\r\n                    resolve(rows);\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * retrieves the ServerTime(DB Time) via a Query\r\n         * uses the RetrieveServerTime Stored Procedure\r\n         */\r\n        retrieveServerTime() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"call RetrieveServerTime()\",\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * retrieves the CustomerReference via a Query\r\n         * uses the RetrieveCustomerReferenceViaActivationKey Stored Procedure\r\n         * @param activationKey used to determine which information is needed\r\n         */\r\n        retrieveCustomerReference(activationKey: string) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"call RetrieveCustomerReferenceViaActivationKey(?)\",[activationKey],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * retrieves the ManastoneServerVersion via a Query\r\n         * uses the RetrieveManastoneVersion Stored Procedure\r\n         */\r\n        retrieveManastoneVersion() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL RetrieveManastoneVersion()\", [],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Activates a SerialNumber via a Query\r\n         * uses the Activate Stored Procedure\r\n         * @param serialNumber\r\n         * @param hardwareId Will be saved in the Activation Table\r\n         */\r\n        activateSerialNumber(serialNumber: string, hardwareId: string) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL Activate(?, ?)\", [serialNumber, hardwareId],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Deactivates a SerialNumber via a Query\r\n         * uses the Deactivate Stored Procedure\r\n         * @param serialNumber\r\n         */\r\n        deactivateSerialNumber(serialNumber: string) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL Deactivate(?)\", [serialNumber],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * retrieves a log which determines if the SerialNumber is activatable via a Query\r\n         * uses the CheckActivatable Stored Procedure\r\n         * @param serialNumber\r\n         */\r\n        checkSerialNumberActivatable(serialNumber: string) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL CheckActivatable(?)\", [serialNumber],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Generates and returns an Token\r\n         * uses the GenerateTokenByActivationKey Stored Procedure\r\n         * @param activationKey\r\n         */\r\n        retrieveToken(activationKey : string){\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL GenerateTokenByActivationKey(?)\", [activationKey],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks if an token is valid\r\n         * this function will check the DateOfExpiry -1H min\r\n         * @param Token\r\n         */\r\n        checkToken(Token : string){\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL CheckToken(?)\", [Token],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks if an token is valid\r\n         * this function will check the DateOfExpiry\r\n         * @param Token\r\n         */\r\n        checkTokenServerSide(Token : string){\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL CheckTokenServerSide(?)\", [Token],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks if an Activation is valid\r\n         * @param activationKey\r\n         * @param hardwareId\r\n         */\r\n        checkActivation(activationKey: string, hardwareId: string){\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL CheckActivation(?, ?)\", [activationKey, hardwareId],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks if the Product to be Activated matches the entered Serial Number\r\n         * @param productUUID\r\n         * @param serialNumber\r\n         */\r\n        checkProductMatchingSerialNumber(productUUID : string, serialNumber :string){\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"CALL CheckIfSerialNumberMatchesTheProductUUID(?,?)\", [productUUID, serialNumber],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Inserts the Log of the Server\r\n         * @param socketId\r\n         * @param message\r\n         */\r\n        insertServerLog(socketId: string, message: string) {\r\n            this.connection.query(\"INSERT INTO `ServerLog`\" +\r\n                \"(\" +\r\n                \"`SocketId`,\" +\r\n                \"`Message`)\" +\r\n                \"VALUES\" +\r\n                \"(?, ?)\",\r\n                [socketId, message]\r\n                , (err) => {\r\n                    if (err)\r\n                        console.log(err);\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Closes the DB Connection\r\n         */\r\n        close() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.end(err => {\r\n                    if (err)\r\n                        return reject(err);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n    }\r\n}"]}